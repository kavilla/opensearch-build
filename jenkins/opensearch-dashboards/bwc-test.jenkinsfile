lib = library(identifier: "jenkins@20211118", retriever: legacySCM(scm))

pipeline {
    agent none
    environment {
        AWS_ROLE_ARN = "arn:aws:iam::${AWS_ACCOUNT_PUBLIC}:role/opensearch-test"
        AWS_ROLE_SESSION_NAME = "jenkins-test-session"
        BUILD_MANIFEST = "build-manifest.yml"
    }
    parameters {
        string(
            defaultValue: '',
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. manifests/2.0.0/opensearch-2.0.0-test.yml.',
            trim: true
        )
        string(
            defaultValue: '',
            name: 'BUILD_MANIFEST_URL',
            description: 'The build manifest URL, e.g. https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/1.2.2/98/linux/x64/builds/opensearch/manifest.yml.',
            trim: true
        )
        string(
            defaultValue: '',
            name: 'AGENT_LABEL',
            description: 'The agent label where the tests should be executed, e.g. Jenkins-Agent-al2-x64-c54xlarge-Docker-Host.',
            trim: true
        )
    }
    stages {
        stage('bwc-test') {
            agent {
                node {
                    label "${AGENT_LABEL}"
                }
            }
            steps {
                script {
                    def buildManifestObj = downloadBuildManifest(
                        url: BUILD_MANIFEST_URL,
                        path: BUILD_MANIFEST
                    )
                    String buildId = buildManifestObj.getArtifactBuildId()
                    env.BUILD_ID = buildId
                    echo "BUILD_MANIFEST: ${BUILD_MANIFEST}"
                    echo "BUILD_ID: ${BUILD_ID}"

                    runBwcTestScript(
                        buildManifest: "${BUILD_MANIFEST}",
                        testManifest: "${TEST_MANIFEST}",
                        buildId: "${BUILD_ID}"
                    )
                }
            }
            post {
                always {
                    script {
                        uploadTestResults(
                            buildManifestFileName: "${BUILD_MANIFEST}",
                            jobName: 'bwc-test',
                            buildNumber: "${BUILD_ID}"
                        )
                    }
                    cleanWs disableDeferredWipeout: true, deleteDirs: true
                }
            }
        }
    }

    post {
        success {
            node('Jenkins-Agent-al2-x64-m5xlarge') {
                script {
                    def stashed = lib.jenkins.Messages.new(this).get(['bwc-test'])
                    publishNotification(
                        icon: ':white_check_mark:',
                        message: 'Bwc Tests Successful',
                        extra: stashed,
                        credentialsId: 'BWC_TEST_WEBHOOK',
                    )

                    cleanWs(
                        disableDeferredWipeout: true,
                        deleteDirs: true
                    )
                }
            }
        }
        failure {
            node('Jenkins-Agent-al2-x64-m5xlarge') {
                script  {
                    def stashed = lib.jenkins.Messages.new(this).get(['bwc-test'])
                    publishNotification(
                        icon: ':warning:',
                        message: 'Failed Bwc Tests',
                        extra: stashed,
                        credentialsId: 'BWC_TEST_WEBHOOK',
                    )

                    cleanWs(
                        disableDeferredWipeout: true,
                        deleteDirs: true
                    )
                }
            }
        }
    }
}
